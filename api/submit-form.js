import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

export default async function handler(req, res) {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') return res.status(200).end();
  if (req.method !== 'POST') return res.status(405).json({ message: 'Method not allowed' });

  try {
    const { first_name, last_name, email, birth_date, location, services, specialist } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –º–∞—Å—Å–∏–≤–∞ services
    if (!first_name || !email) {
      return res.status(400).json({ 
        success: false,
        message: '–ò–º—è –∏ email –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      });
    }

    if (!Array.isArray(services) || services.length === 0) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —É—Å–ª—É–≥—É'
      });
    }

    if (!specialist) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞'
      });
    }

    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user, error: userError } = await supabase
      .from('users')
      .insert({
        first_name,
        last_name: last_name || null,
        email,
        birth_date: birth_date ? new Date(birth_date).toISOString() : null,
        location: location || null
      })
      .select()
      .single();

    if (userError) throw userError;

    // 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è appointments
    const appointmentsToInsert = services
      .filter(service => service) // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è null/undefined
      .map(service_id => ({
        user_id: user.id,
        service_id,
        specialist_id: specialist
      }));

    if (appointmentsToInsert.length === 0) {
      throw new Error('–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —É—Å–ª—É–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    }

    // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ª—É–≥–∏
    const { error: appointmentsError } = await supabase
      .from('appointments')
      .insert(appointmentsToInsert);

    if (appointmentsError) throw appointmentsError;

    // 4. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const telegramMessage = `
      üöÄ –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
      –ò–º—è: ${first_name}${last_name ? ' ' + last_name : ''}
      Email: ${email}
      ${birth_date ? `–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${new Date(birth_date).toLocaleDateString()}\n` : ''}
      ${location ? `–õ–æ–∫–∞—Ü–∏—è: ${location}\n` : ''}
      –£—Å–ª—É–≥–∏: ${services.join(', ')}
      –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${specialist}
    `.trim();

    // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    if (process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_CHAT_ID) {
      try {
        const telegramUrl = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`;
        const telegramResponse = await fetch(telegramUrl, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: process.env.TELEGRAM_CHAT_ID,
            text: telegramMessage
          })
        });

        const telegramResult = await telegramResponse.json();
        if (!telegramResult.ok) {
          console.error('–û—à–∏–±–∫–∞ Telegram:', telegramResult);
        }
      } catch (tgError) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', tgError);
      }
    }

    return res.status(200).json({ 
      success: true,
      message: '–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.' 
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
    return res.status(500).json({ 
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏',
      ...(process.env.NODE_ENV === 'development' && { 
        error: error.message,
        stack: error.stack 
      })
    });
  }
}
