const sgMail = require('@sendgrid/mail');
const { createClient } = require('@supabase/supabase-js');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SendGrid
sgMail.setApiKey(process.env.SENDGRID_API_KEY);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

module.exports = async (req, res) => {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' });
  }

  try {
    const { first_name, last_name, email, birth_date, location, services, specialist } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!first_name || !last_name || !email || !birth_date || !location || !services || !specialist) {
      return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' });
    }

    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
    const { data: user, error: userError } = await supabase
      .from('users')
      .upsert(
        {
          first_name,
          last_name,
          email,
          birth_date: new Date(birth_date).toISOString(),
          location
        },
        { onConflict: 'email' }
      )
      .select()
      .single();

    if (userError) throw userError;

    // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å–∏ –æ —É—Å–ª—É–≥–∞—Ö
    const { error: servicesError } = await supabase
      .from('user_services')
      .insert(
        services.map(service_id => ({
          user_id: user.id,
          service_id: parseInt(service_id),
          specialist_id: parseInt(specialist)
        }))
      );

    if (servicesError) throw servicesError;

    // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    const adminEmail = {
      to: process.env.SENDGRID_TO_EMAIL,
      from: process.env.SENDGRID_FROM_EMAIL,
      replyTo: email,
      subject: 'üî• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä',
      html: `
        <h2>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</h2>
        <p><strong>–ò–º—è:</strong> ${first_name} ${last_name}</p>
        <p><strong>Email:</strong> ${email}</p>
        <p><strong>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</strong> ${new Date(birth_date).toLocaleDateString()}</p>
        <p><strong>–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:</strong> ${location}</p>
        <p><strong>–£—Å–ª—É–≥–∏:</strong> ${services.join(', ')}</p>
        <p><strong>–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç ID:</strong> ${specialist}</p>
        <p><strong>–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏:</strong> ${new Date().toLocaleString()}</p>
      `
    };

    // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    const clientEmail = {
      to: email,
      from: process.env.SENDGRID_FROM_EMAIL,
      subject: '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞',
      html: `
        <h2>–°–ø–∞—Å–∏–±–æ, ${first_name}!</h2>
        <p>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –ø–æ–ª—É—á–µ–Ω–∞.</p>
        <p><strong>–î–µ—Ç–∞–ª–∏:</strong></p>
        <ul>
          <li>–î–∞—Ç–∞: ${new Date().toLocaleDateString()}</li>
          <li>–£—Å–ª—É–≥–∏: ${services.join(', ')}</li>
        </ul>
        <p>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.</p>
      `
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–æ–∏—Ö –ø–∏—Å–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await Promise.all([
      sgMail.send(adminEmail),
      sgMail.send(clientEmail)
    ]);

    return res.status(200).json({ 
      success: true,
      message: '–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.' 
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    return res.status(500).json({ 
      success: false,
      message: error.response?.body?.errors?.[0]?.message || 
              error.message || 
              '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã'
    });
  }
};
