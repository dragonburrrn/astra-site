import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;

const supabase = createClient(supabaseUrl, supabaseKey);

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
  }

  try {
    const { first_name, last_name, email, birth_date, location, services, specialist } = req.body;
import { createClient } from '@supabase/supabase-js';
import sgMail from '@sendgrid/mail';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SendGrid
sgMail.setApiKey(process.env.SENDGRID_API_KEY);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' });
  }

  try {
    const { first_name, last_name, email, birth_date, location, services, specialist } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!first_name || !last_name || !email || !birth_date || !location || !services || !specialist) {
      throw new Error('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
    }

    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Supabase
    const { data: user, error: supabaseError } = await supabase
      .from('users')
      .upsert(
        { 
          first_name, 
          last_name, 
          email, 
          birth_date: new Date(birth_date).toISOString(), 
          location 
        },
        { onConflict: 'email' }
      )
      .select()
      .single();

    if (supabaseError) throw supabaseError;

    // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥–∞—Ö
    const { error: servicesError } = await supabase
      .from('user_services')
      .insert(
        services.map(service_id => ({
          user_id: user.id,
          service_id,
          specialist_id: specialist
        }))
      );

    if (servicesError) throw servicesError;

    // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    const adminMsg = {
      to: process.env.SENDGRID_TO_EMAIL,
      from: process.env.SENDGRID_FROM_EMAIL,
      replyTo: email, // –û—Ç–≤–µ—Ç—ã –ø–æ–π–¥—É—Ç –∫–ª–∏–µ–Ω—Ç—É
      subject: 'üî• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä',
      html: `
        <h2>–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</h2>
        <p><strong>–ò–º—è:</strong> ${first_name} ${last_name}</p>
        <p><strong>Email:</strong> ${email}</p>
        <p><strong>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</strong> ${new Date(birth_date).toLocaleDateString()}</p>
        <p><strong>–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:</strong> ${location}</p>
        <p><strong>–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç ID:</strong> ${specialist}</p>
        <p><strong>–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:</strong> ${services.join(', ')}</p>
        <p><strong>–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏:</strong> ${new Date().toLocaleString()}</p>
        <br>
        <p>–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!</p>
      `,
    };

    // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    const clientMsg = {
      to: email,
      from: process.env.SENDGRID_FROM_EMAIL,
      subject: '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞',
      html: `
        <h2>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É, ${first_name}!</h2>
        <p>–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</p>
        <p><strong>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</strong></p>
        <ul>
          <li>–î–∞—Ç–∞: ${new Date().toLocaleDateString()}</li>
          <li>–£—Å–ª—É–≥–∏: ${services.join(', ')}</li>
        </ul>
        <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ Astra</p>
      `,
    };

    await Promise.all([
      sgMail.send(adminMsg),
      sgMail.send(clientMsg)
    ]);

    return res.status(200).json({ 
      success: true,
      message: '–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.' 
    });

  } catch (error) {
    console.error('Error:', error);
    return res.status(500).json({ 
      success: false,
      message: error.response?.body?.errors?.[0]?.message || 
              error.message || 
              '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã' 
    });
  }
}
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!first_name || !last_name || !email || !birth_date || !location || !services || !specialist) {
      return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('email', email)
      .single();

    if (!user) {
      const { data: newUser, error: newUserError } = await supabase
        .from('users')
        .insert([{ 
          first_name, 
          last_name, 
          email, 
          birth_date, 
          location 
        }])
        .select()
        .single();
      
      if (newUserError) throw newUserError;
      user = newUser;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —É—Å–ª—É–≥–∏
    for (const service_id of services) {
      const { error: appointmentError } = await supabase
        .from('appointments')
        .insert([{
          user_id: user.id,
          service_id: parseInt(service_id),
          specialist_id: parseInt(specialist)
        }]);
      
      if (appointmentError) throw appointmentError;
    }

    return res.status(200).json({ 
      message: '–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.' 
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    return res.status(500).json({ 
      message: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã' 
    });
  }
}
