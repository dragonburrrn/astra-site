import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

export default async function handler(req, res) {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') return res.status(200).end();
  if (req.method !== 'POST') return res.status(405).json({ message: 'Method not allowed' });

  try {
    const { first_name, last_name, email, birth_date, location, services, specialist } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!first_name || !email || !services || !specialist) {
      return res.status(400).json({ message: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –∏–º—è, email, —É—Å–ª—É–≥–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç' });
    }

    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É users
    const { data: user, error: userError } = await supabase
      .from('users')
      .insert({
        first_name,
        last_name,
        email,
        birth_date: birth_date ? new Date(birth_date).toISOString() : null,
        location
      })
      .select()
      .single();

    if (userError) throw userError;

    // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ª—É–≥–∏ –≤ —Ç–∞–±–ª–∏—Ü—É appointments
    const appointmentsData = services.map(service_id => ({
      user_id: user.id,
      service_id,
      specialist_id: specialist,
      created_at: new Date().toISOString()
    }));

    const { error: appointmentsError } = await supabase
      .from('appointments')
      .insert(appointmentsData);

    if (appointmentsError) throw appointmentsError;

    // 3. –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥ –¥–ª—è Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    // (–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ services —Å id –∏ name)
    const { data: servicesData } = await supabase
      .from('services')
      .select('name')
      .in('id', services);

    const serviceNames = servicesData.map(s => s.name).join(', ');

    // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    const telegramMessage = `
      üöÄ *–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç*
      ‚îú *–ò–º—è*: ${first_name} ${last_name}
      ‚îú *Email*: ${email}
      ‚îú *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è*: ${birth_date ? new Date(birth_date).toLocaleDateString() : '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
      ‚îú *–õ–æ–∫–∞—Ü–∏—è*: ${location || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
      ‚îú *–£—Å–ª—É–≥–∏*: ${serviceNames}
      ‚îî *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç*: ${specialist}
    `.replace(/^ +/gm, '');

    const telegramResponse = await fetch(
      `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: process.env.TELEGRAM_YOUR_CHAT_ID,
          text: telegramMessage,
          parse_mode: 'Markdown'
        })
      }
    );

    const result = await telegramResponse.json();
    if (!result.ok) throw new Error('Telegram send failed');

    return res.status(200).json({ 
      success: true,
      message: '–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.' 
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    return res.status(500).json({ 
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏',
      error: process.env.NODE_ENV === 'development' ? error.message : null
    });
  }
}
