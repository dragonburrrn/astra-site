import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

export default async function handler(req, res) {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') return res.status(200).end();
  if (req.method !== 'POST') return res.status(405).json({ message: 'Method not allowed' });

  try {
    const { first_name, last_name, email, birth_date, location, services, specialist } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const errors = [];
    if (!first_name) errors.push('–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
    if (!email) errors.push('Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    if (!Array.isArray(services) errors.push('–£—Å–ª—É–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
    if (!specialist) errors.push('–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    
    if (errors.length > 0) {
      return res.status(400).json({ 
        success: false,
        message: errors.join(', ') 
      });
    }

    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user, error: userError } = await supabase
      .from('users')
      .insert({
        first_name,
        last_name: last_name || null,
        email,
        birth_date: birth_date ? new Date(birth_date).toISOString() : null,
        location: location || null
      })
      .select()
      .single();

    if (userError) throw userError;

    // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ª—É–≥–∏
    const { error: appointmentsError } = await supabase
      .from('appointments')
      .insert(
        services.map(service_id => ({
          user_id: user.id,
          service_id,
          specialist_id: specialist
        }))
      );

    if (appointmentsError) throw appointmentsError;

    // 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram (—Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π)
    if (process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_CHAT_ID) {
      try {
        const telegramMessage = `
          üöÄ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>
          üë§ <b>–ò–º—è:</b> ${first_name}${last_name ? ' ' + last_name : ''}
          ‚úâÔ∏è <b>Email:</b> ${email}
          ${birth_date ? `üéÇ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> ${new Date(birth_date).toLocaleDateString()}\n` : ''}
          ${location ? `üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> ${location}\n` : ''}
          üõ† <b>–£—Å–ª—É–≥–∏:</b> ${services.join(', ')}
          üë©‚Äç‚öïÔ∏è <b>–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:</b> ${specialist}
        `.trim();

        const telegramUrl = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`;
        const response = await fetch(telegramUrl, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: process.env.TELEGRAM_CHAT_ID,
            text: telegramMessage,
            parse_mode: 'HTML'
          })
        });

        const result = await response.json();
        
        if (!result.ok) {
          console.error('Telegram API Error:', result);
          throw new Error(result.description || '–û—à–∏–±–∫–∞ Telegram API');
        }

        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:', result.result.message_id);
      } catch (tgError) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', tgError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
      }
    } else {
      console.warn('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É');
    }

    return res.status(200).json({ 
      success: true,
      message: '–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.' 
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
    return res.status(500).json({ 
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏',
      ...(process.env.NODE_ENV === 'development' && { error: error.message })
    });
  }
}
