import { createClient } from '@supabase/supabase-js';
import sgMail from '@sendgrid/mail';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SendGrid
sgMail.setApiKey(process.env.SENDGRID_API_KEY);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const NOTIFICATION_CONFIG = {
  adminEmail: 'your@domain.com', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à email
  fromEmail: 'noreply@yourdomain.com', // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π email –≤ SendGrid
  adminNotificationTemplate: `
    <h2>üî• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</h2>
    <p><strong>ID –∑–∞—è–≤–∫–∏:</strong> {{orderId}}</p>
    <p><strong>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</strong> {{currentDate}}</p>
    <h3>–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:</h3>
    <p><strong>–ò–º—è:</strong> {{firstName}} {{lastName}}</p>
    <p><strong>Email:</strong> <a href="mailto:{{email}}">{{email}}</a></p>
    <p><strong>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</strong> {{birthDate}}</p>
    <p><strong>–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:</strong> {{location}}</p>
    <h3>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</h3>
    <p><strong>–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:</strong> {{specialistId}}</p>
    <p><strong>–£—Å–ª—É–≥–∏:</strong> {{services}}</p>
    <p><strong>–°—Å—ã–ª–∫–∞ –≤ –∞–¥–º–∏–Ω–∫—É:</strong> <a href="{{adminLink}}">–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞—è–≤–∫–µ</a></p>
  `,
  clientNotificationTemplate: `
    <h2>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É, {{firstName}}!</h2>
    <p>–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</p>
    <h3>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</h3>
    <ul>
      <li><strong>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</strong> {{orderId}}</li>
      <li><strong>–î–∞—Ç–∞:</strong> {{currentDate}}</li>
      <li><strong>–£—Å–ª—É–≥–∏:</strong> {{services}}</li>
    </ul>
    <p>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
  `
};

export default async function handler(req, res) {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') return res.status(200).end();
  if (req.method !== 'POST') return res.status(405).json({ message: 'Method not allowed' });

  try {
    const { first_name, last_name, email, birth_date, location, services, specialist } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!first_name || !last_name || !email || !birth_date || !location || !services || !specialist) {
      return res.status(400).json({ 
        success: false,
        message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' 
      });
    }

    // 1. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const { data: user, error: userError } = await supabase
      .from('users')
      .insert({
        first_name,
        last_name,
        email,
        birth_date: new Date(birth_date).toISOString(),
        location
      })
      .select()
      .single();

    if (userError) throw userError;

    // 2. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è—Ö
    const appointmentsData = services.map(service_id => ({
      user_id: user.id,
      service_id,
      specialist_id: specialist,
      status: 'new',
      created_at: new Date().toISOString()
    }));

    const { data: appointments, error: appointmentsError } = await supabase
      .from('appointments')
      .insert(appointmentsData)
      .select();

    if (appointmentsError) throw appointmentsError;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∑–∞—è–≤–∫–∏ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π appointment ID)
    const orderId = appointments[0].id;
    const currentDate = new Date().toLocaleString();
    const adminLink = `${process.env.ADMIN_PANEL_URL}/orders/${orderId}`;

    // 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∏—Å–µ–º
    const emailData = {
      orderId,
      firstName: first_name,
      lastName: last_name,
      email,
      birthDate: new Date(birth_date).toLocaleDateString(),
      location,
      specialistId: specialist,
      services: services.join(', '),
      currentDate,
      adminLink
    };

    // 4. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    const adminMsg = {
      to: NOTIFICATION_CONFIG.adminEmail,
      from: NOTIFICATION_CONFIG.fromEmail,
      replyTo: email,
      subject: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${orderId} –æ—Ç ${first_name} ${last_name}`,
      html: renderTemplate(NOTIFICATION_CONFIG.adminNotificationTemplate, emailData),
      mail_settings: {
        sandbox_mode: {
          enable: process.env.NODE_ENV === 'test' // –í–∫–ª—é—á–∏—Ç—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        }
      }
    };

    // 5. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
    const clientMsg = {
      to: email,
      from: NOTIFICATION_CONFIG.fromEmail,
      subject: `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #${orderId} –ø—Ä–∏–Ω—è—Ç–∞`,
      html: renderTemplate(NOTIFICATION_CONFIG.clientNotificationTemplate, emailData)
    };

    // 6. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å–µ–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    const [adminResult, clientResult] = await Promise.allSettled([
      sgMail.send(adminMsg),
      sgMail.send(clientMsg)
    ]);

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logEmailResult(adminResult, 'Admin notification');
    logEmailResult(clientResult, 'Client confirmation');

    return res.status(200).json({ 
      success: true,
      orderId,
      message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.' 
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏:', error);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    sendErrorNotification(error, req.body);

    return res.status(500).json({ 
      success: false,
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏',
      ...(process.env.NODE_ENV === 'development' && { error: error.message })
    });
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

function renderTemplate(template, data) {
  return template.replace(/\{\{(\w+)\}\}/g, (_, key) => data[key] || '');
}

function logEmailResult(result, emailType) {
  if (result.status === 'fulfilled') {
    console.log(`${emailType} sent successfully`, result.value[0].headers);
  } else {
    console.error(`Error sending ${emailType}:`, result.reason);
    if (result.reason.response) {
      console.error('SendGrid response:', result.reason.response.body);
    }
  }
}

async function sendErrorNotification(error, formData) {
  try {
    await sgMail.send({
      to: NOTIFICATION_CONFIG.adminEmail,
      from: NOTIFICATION_CONFIG.fromEmail,
      subject: 'üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏',
      html: `
        <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏</h2>
        <p><strong>–û—à–∏–±–∫–∞:</strong> ${error.message}</p>
        <p><strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleString()}</p>
        <h3>–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:</h3>
        <pre>${JSON.stringify(formData, null, 2)}</pre>
      `
    });
  } catch (emailError) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', emailError);
  }
}
